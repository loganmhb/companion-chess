// Generated by CoffeeScript 1.10.0
(function() {
  var makeBestMove, parseMove, parseUci, postMessage, receiveMessage, sf, uciEl, uciHistoryEl,
    slice = [].slice;

  sf = new Worker('js/lib/stockfish.js');

  uciEl = $("#uci");

  uciHistoryEl = $("#ucihistory");

  parseMove = function(uciMove) {
    var move;
    move = {
      from: uciMove.slice(0, 2),
      to: uciMove.slice(2, 4)
    };
    console.log(move);
    return move;
  };

  parseUci = function(uciMessage) {
    var args, command, ref;
    ref = uciMessage.split(" "), command = ref[0], args = 2 <= ref.length ? slice.call(ref, 1) : [];
    switch (command) {
      case "bestmove":
        return {
          type: "bestmove",
          move: parseMove(args[0])
        };
      case "info":
        return {
          type: "info",
          args: args
        };
    }
  };

  postMessage = function(message) {
    uciHistoryEl.append("<br>" + message);
    return sf.postMessage(message);
  };

  postMessage = function(message) {
    uciHistoryEl.append("<br>" + message);
    return sf.postMessage(message);
  };

  receiveMessage = function(message) {
    uciHistoryEl.append("<br><span style=\"color: blue\">" + message + "</span>");
    return parseUci(message);
  };

  uciEl.keypress(function(event) {
    if (event.keyCode === 13) {
      postMessage(uciEl.val());
      return uciEl.val("");
    }
  });

  makeBestMove = function(fen, moveHandler) {
    console.log("Getting best move.");
    sf.onmessage = function(event) {
      var command;
      command = receiveMessage(event.data);
      if ((command != null ? command.type : void 0) === "bestmove") {
        return moveHandler(command.move);
      }
    };
    postMessage("position fen " + fen);
    return postMessage("go depth 8");
  };

  window.engine = {
    makeBestMove: function(fen, moveHandler) {
      return makeBestMove(fen, moveHandler);
    }
  };

}).call(this);
